import static org.junit.Assert.*;

import org.junit.Test;

public class junittest {

	@Test
	public void testinsertandget() //Tests the insert and get methods
	{
		
		//Creating and inserting elements
		StringListExt testObject = new StringListExt();
		testObject.insert("banana");
		testObject.insert("butt");
		testObject.insert("butt"); //Testing if duplicate persists
		testObject.insert("island");
		
		//Tests element at each index
		assertEquals("banana", testObject.get(0));
		assertEquals("butt", testObject.get(1));
		assertEquals("island", testObject.get(2));
		
		
	}
	
	@Test
	public void testToString() //tests the toString method
	{
		//Creating and inserting elements
		StringListExt testObject = new StringListExt();
		testObject.insert("banana");
		testObject.insert("butt");
		testObject.insert("man");
		
		String expectedOutput = "banana butt man "; //Expected output from the ToString call
		String whatIsStored = testObject.toString(); //Actual output from the ToString call
		
		assertEquals(expectedOutput, whatIsStored); //Testing the expected and actual output against each other
	}
	
	@Test
	public void testSearch() //tests the search method
	{
		
		//Creating and inserting elements
		StringListExt testObject = new StringListExt();
		testObject.insert("banana");
		testObject.insert("butt");
		testObject.insert("island");
		
		//Tests for expected index number returns
		assertEquals(0, testObject.search("banana"));
		assertEquals(1, testObject.search("butt"));
		assertEquals(2, testObject.search("island"));
		
		//Tests for failure to find
		assertEquals(-1, testObject.search("Ambrosia"));
	}
	
	@Test
	public void testAdd() //Tests the add method
	{
		//Creating StringListExt object
		StringListExt testObject = new StringListExt();
		
		//Tests adding to empty
		testObject.add("The Amazing");
		assertEquals("The Amazing", testObject.get(0));
		
		//Inserting other items
		testObject.insert("banana");
		testObject.insert("butt");
		testObject.insert("island");
		
		//testObject.add("banana"); //Duplicates can persist with Add method
		testObject.add("banana");
		
		//Test all elements
		assertEquals(0, testObject.search("The Amazing"));
		assertEquals(1, testObject.search("banana"));
		assertEquals(2, testObject.search("butt"));
		assertEquals(3, testObject.search("island"));
		assertEquals(1, testObject.search("banana")); //Duplicates will not register with search, since it finds the FIRST iteration of that element
		
		String expectedOutcome = "The Amazing banana butt island banana "; //banana still persists, as the add method allows
		String actualOutcome = testObject.toString();
		
		assertEquals(expectedOutcome, actualOutcome); //Compares the actual and expected results
		
		
	}
	
	@Test
	public void testLength() //Tests the length method
	{
		//Creating and inserting elements
		StringListExt testObject = new StringListExt();
		testObject.insert("banana");
		testObject.insert("butt");
		testObject.insert("island");
		
		int expectedLength = 3;
		int ReturnLength = testObject.length();
		
		//Tests actual and expected length return result
		assertEquals(expectedLength, ReturnLength);
	}
	
	@Test
	public void testRemove() //Tests the remove method
	{
		
		
		//Creating StringListExt object
		StringListExt testObject = new StringListExt();
		
		//Testing remove on empty list
		testObject.remove("Camels");
		
		//Inserting objects
		testObject.insert("banana");
		testObject.insert("butt");
		testObject.insert("island");
		
		//Test to remove what isn't there
		testObject.remove("Camels");
		assertEquals(0, testObject.search("banana"));
		assertEquals(1, testObject.search("butt"));
		assertEquals(2, testObject.search("island"));
		
		
		//Test to remove first element
		testObject.remove("banana");
		assertEquals(-1, testObject.search("banana"));
		assertEquals(0, testObject.search("butt"));
		assertEquals(1, testObject.search("island"));
		
		//Test to remove ending element
		testObject.remove("island");
		assertEquals(-1, testObject.search("banana"));
		assertEquals(0, testObject.search("butt"));
		assertEquals(-1, testObject.search("island"));
		
		//Test to remove last element
		testObject.remove("butt");
		assertEquals(-1, testObject.search("banana"));
		assertEquals(-1, testObject.search("butt"));
		assertEquals(-1, testObject.search("island"));
		
		//Test to see that an empty object returns when the elements are removed
		String expectedOutcome = "";
		String actualOutcome = testObject.toString();
		assertEquals(expectedOutcome, actualOutcome);
		
	}
	


}
